"0",""
"0","create_comb <- function(granulate) {"
"0","  if (granulate == FALSE) {"
"0","    treatments <- colnames(CountData) %>%"
"0","      str_replace_all(.,regex(""[\\d]""),"""") %>% "
"0","      str_replace_all(.,regex(""F|M""),"""") %>% "
"0","      as.factor() %>%"
"0","      levels() #lista de posibles tratamientso"
"0","    "
"0","    combinations <- gtools::combinations(n = 3,r = 2,v=treatments,repeats.allowed = F) %>%"
"0","      as.data.frame() %>% "
"0","      arrange(V1,V2) "
"0","    return(combinations)"
"0","  }else {"
"0","    treatments <- colnames(CountData) %>%"
"0","      str_replace_all(.,regex(""[\\d]""),"""") %>% "
"0","      as.factor() %>%"
"0","      levels() #lista de posibles tratamientso"
"0","    "
"0","    combinations <- gtools::combinations(n = 6,r = 2,v=treatments,repeats.allowed = F) %>%"
"0","      as.data.frame() %>% "
"0","      arrange(V1,V2) "
"0","    return(combinations)"
"0","    "
"0","  }"
"0","}"
"0",""
"0","#combinations <- create_comb(granulate = F) %>% "
"0","  #combinations <- gtools::combinations(n=3,r=2,v=treatments,repeats.allowed = F) %>%"
"0","    #ToDo crear condicional basado en create_comb"
"0","#as.data.frame() %>% arrange(V1,V2)"
"0",""
"0","#funcion para slice el dataframe"
"0","slice_countdata <- function(countData, index) {"
"0",""
"0","  combination <- as.data.frame(t(combinations))[,index]"
"0","  "
"0","  treatment1 <- ifelse(str_detect(colnames(CountData),combination[1]) |"
"0","                     str_detect(colnames(CountData),combination[2]),TRUE,FALSE)"
"0","  "
"0","  slice_countdata <- CountData[treatment1]"
"0","  return(slice_countdata)"
"0","}"
"0",""
"0","set_diet_names <- function() {"
"0","  names_sliced_dt <- paste0(as.data.frame(t(combinations))) %>%"
"0","    str_replace_all(., regex(""([^A-Za-z\\s])"") ,'') %>%"
"0","    str_replace_all(.,""c"","""") %>% str_replace_all("" "", ""_v._"")"
"0","}"
"0",""
"0",""
"0","  "
"0","# DE SEX "
"0","DE <- function(count, col, design, lfc) {"
"0","  dds <- DESeqDataSetFromMatrix(countData=count,"
"0","                                colData=col,"
"0","                                design = design)"
"0","  register(MulticoreParam(7)) "
"0","  keep <- rowSums(counts(dds)) >= 10 #prefliter"
"0","  dds <- dds[keep,]"
"0","  dds <- DESeq(dds, parallel = T)"
"0","  DESeq2 <- results(dds, alpha = 0.05, lfcThreshold = lfc[2])"
"0","  treatment = str_replace_all(DESeq2@elementMetadata$description[2],"
"0","            regex(""\\w+\\s\\w+\\s\\w+\\s\\(\\w+\\):\\s+""),"""")"
"0","  DESeq2 <- DESeq2 %>% as.data.frame() %>% na.omit()"
"0","  DESeq2$differex <- ""Not significant"""
"0","  DESeq2$differex[DESeq2$log2FoldChange >= lfc[2] & DESeq2$padj <= 0.05 ] <- ""UP"""
"0","  DESeq2$differex[DESeq2$log2FoldChange <= lfc[1] & DESeq2$padj <= 0.05] <- ""DOWN"""
"0","  DESeq2$Comparation = as.factor(treatment)"
"0","  DESeq2$Contig_Name = row.names(DESeq2)"
"0","  row.names(DESeq2) <- NULL"
"0","  DESeq2 <- select(DESeq2,Contig_Name, everything())"
"0","  "
"0","  return(list(DESeq2,col, design, count))"
"0","}"
"0",""
"0",""
"0","AutoDE <- function(between, lfc) {"
"0","  if (between == ""SEX"") {"
"0","    DESeq2_sex <- DE(count = CountData,"
"0","                     col = Coldata, "
"0","                     design = as.formula(""~ SEX""),"
"0","                     lfc = lfc) #Supplementary Table S2.xlsx"
"0","    write.xlsx(DESeq2_sex[1], paste0(getwd(),""/Results_DE/Supplementary Table S2.xlsx"")|> str_replace(""/scripts"",""""))"
"0","    return(DESeq2_sex)"
"0","  }else if (between == ""DIET wide"") {"
"0","    combinations <<- create_comb(granulate = F) %>% "
"0","    as.data.frame() %>% arrange(V1,V2)"
"0","    counter <- 0"
"0","    sliced_dataframes <- list()"
"0","    for (i in as.data.frame(t(combinations))) { #crear dataframe para expresion diferenciasl por dieta"
"0","      counter <- counter +1"
"0","      slice <- slice_countdata(countData = CountData, index = counter)"
"0","      sliced_dataframes[[length(sliced_dataframes)+1]] <- slice"
"0","      rm(slice)"
"0","      "
"0","    }"
"0","    names(sliced_dataframes) <- set_diet_names()"
"0","    counter <- 0"
"0","    DESeq2_diets <- list()"
"0","    for (i in sliced_dataframes) {"
"0","      col_index <- paste(as.data.frame(t(combinations))[[counter+1]][1],"
"0","                         as.data.frame(t(combinations))[[counter+1]][2],sep = ""|"")"
"0","      DESeq2_diets[[length(DESeq2_diets)+1]] <- DE(count = i,"
"0","                                              col ="
"0","                                              filter(Coldata,"
"0","                                                     grepl(col_index,Grupo_intra)), "
"0","                                              design = as.formula("" ~ SEX + DIET""),"
"0","                                              lfc = lfc)"
"0","      counter <- counter +1"
"0","      print(glue(""Differential expression between {names(sliced_dataframes)[counter]} done. \n {counter}/{length(sliced_dataframes)}""))"
"0","      }"
"0","    names(DESeq2_diets)<- set_diet_names()"
"0","    return(DESeq2_diets)"
"0","  }else if (between == ""DIET granulate"") {"
"0","    combinations <<- create_comb(granulate = T) %>% "
"0","    as.data.frame() %>% arrange(V1,V2)"
"0","    counter <- 0"
"0","    sliced_dataframes <- list()"
"0","    for (i in as.data.frame(t(combinations))) { #crear dataframe para expresion diferenciasl por dieta"
"0","      counter <- counter +1"
"0","      slice <- slice_countdata(countData = CountData, index = counter)"
"0","      sliced_dataframes[[length(sliced_dataframes)+1]] <- slice"
"0","      rm(slice)"
"0","      "
"0","    }"
"0","    names(sliced_dataframes) <- set_diet_names()"
"0","    counter <- 0"
"0","    DESeq2_diets <- list()"
"0","    for (i in sliced_dataframes) {"
"0","      col_index <- paste(as.data.frame(t(combinations))[[counter+1]][1],"
"0","                         as.data.frame(t(combinations))[[counter+1]][2],sep = ""|"")"
"0","      DESeq2_diets[[length(DESeq2_diets)+1]] <- DE(count = i,"
"0","                                              col ="
"0","                                              filter(Coldata,"
"0","                                                     grepl(col_index,Grupo_intra)), "
"0","                                              design = as.formula("" ~ Grupo_intra""),"
"0","                                              lfc = lfc)"
"0","      counter <- counter +1"
"0","      print(glue(""Differential expression between {names(sliced_dataframes)[counter]} done. \n {counter}/{length(sliced_dataframes)}""))"
"0","      }"
"0","    names(DESeq2_diets)<- set_diet_names()"
"0","    return(DESeq2_diets)"
"0","  }"
"0","  "
"0","}"
"0","lfc = c(-1.5,1.5)"
"0","DESeq2_sex <-  AutoDE(between = ""SEX"",lfc = c(-1.5,1.5))"
"2","converting counts to integer mode
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"2","-- replacing outliers and refitting for 313 genes
-- DESeq argument 'minReplicatesForReplace' = 7 
-- original counts are preserved in counts(dds)
"
"2","estimating dispersions
"
"2","fitting model and testing
"
"0","DESeq2_diet_wide <-  AutoDE(between = ""DIET wide"", lfc = c(-1.5,1.5))"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between G_v._mix done. 
1/3"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between G_v._T done. 
2/3"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between mix_v._T done. 
3/3"
"1","
"
"0","DESeq2_diet_granulate <-  AutoDE(between = ""DIET granulate"",lfc = c(-1.5,1.5))"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between FG_v._Fmix done. 
1/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between FG_v._FT done. 
2/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between FG_v._MG done. 
3/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between FG_v._Mmix done. 
4/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between FG_v._MT done. 
5/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between Fmix_v._FT done. 
6/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between Fmix_v._MG done. 
7/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between Fmix_v._Mmix done. 
8/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between Fmix_v._MT done. 
9/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between FT_v._MG done. 
10/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between FT_v._Mmix done. 
11/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between FT_v._MT done. 
12/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between MG_v._Mmix done. 
13/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between MG_v._MT done. 
14/15"
"1","
"
"2","converting counts to integer mode
"
"2","factor levels were dropped which had no samples
"
"2","estimating size factors
"
"2","estimating dispersions
"
"2","gene-wise dispersion estimates: 7 workers
"
"2","mean-dispersion relationship
"
"2","final dispersion estimates, fitting model and testing: 7 workers
"
"1","Differential expression between Mmix_v._MT done. 
15/15"
"1","
"
