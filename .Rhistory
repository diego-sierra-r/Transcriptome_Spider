combinations
cat(combinations)
print.data.frame(combinations)
DESeq2_diet_granulate$FG_v._Fmix[3]
source("~/Documentos/R/R_Transcriptome/Transcriptome_Spider/scripts/metadata.R")
View(metadata)
metadata$isolation_source <- factor("Sample collected in Huila - Colombia, Templerature: 24.5Â°C; RH: 75.9%")
metadata$sample_title |> str_detect("F")
metadata$sex <- ifelse(metadata$sample_title |> str_detect("F") == T, yes = "Female", no = "Male")
print(19.5:22.5)
print(19.5:22.6)
print(19.2:22.6)
runif(1,19.5,22.6)
knitr::opts_chunk$set(echo = T)
knitr::opts_knit$set(root.dir = getwd())
#install and load packages
list_of_CRAN_packages <- c("tidyverse",
"combinat",
"openxlsx",
"stringr",
"ggplot2",
"readr",
"magrittr",
"ggrepel",
"ggpubr",
"pacman",
"glue",
"BiocManager")
new_packages <- list_of_CRAN_packages[!(list_of_CRAN_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
list_of_Bioconductor_packages <- c("BiocParallel",
"DESeq2",
"EDASeq",
"edgeR",
"bigPint")
new_packages <- list_of_Bioconductor_packages[!(list_of_Bioconductor_packages %in% installed.packages()[,"Package"])]
BiocManager::install(version = '3.15')
if(length(new_packages)) BiocManager::install(new_packages, version = "3.15",update = F)
pacman::p_load(c(list_of_Bioconductor_packages,list_of_CRAN_packages), install = F, character.only = T, update = F)
dataPath <- paste0(getwd(),"/Data")|> str_replace("/scripts","")
CountData <-read.csv(paste0(dataPath,"/HTSeqcount_EDITED_mapeo_clean_ALL_AraBAN.txt"), sep = "\t")
CountData_row_names <- CountData |> dplyr::select(Reference)
base::row.names(CountData) <- CountData_row_names$Reference
CountData <-CountData[,-1]
colnames(CountData) %<>%
str_remove(pattern = "HTSeqcount_mapeo_cleanAraBAN") %>%
str_remove(pattern = ".bam.txt")
Coldata <- read.delim(paste0(dataPath,"/Samples_information.csv"),
sep = ",",
stringsAsFactors = T)
create_comb <- function(granulate) {
if (granulate == FALSE) {
treatments <- colnames(CountData) %>%
str_replace_all(.,regex("[\\d]"),"") %>%
str_replace_all(.,regex("F|M"),"") %>%
as.factor() %>%
levels() #lista de posibles tratamientso
combinations <- gtools::combinations(n = 3,r = 2,v=treatments,repeats.allowed = F) %>%
as.data.frame() %>%
arrange(V1,V2)
return(combinations)
}else {
treatments <- colnames(CountData) %>%
str_replace_all(.,regex("[\\d]"),"") %>%
as.factor() %>%
levels() #lista de posibles tratamientso
combinations <- gtools::combinations(n = 6,r = 2,v=treatments,repeats.allowed = F) %>%
as.data.frame() %>%
arrange(V1,V2)
return(combinations)
}
}
#combinations <- create_comb(granulate = F) %>%
#combinations <- gtools::combinations(n=3,r=2,v=treatments,repeats.allowed = F) %>%
#ToDo crear condicional basado en create_comb
#as.data.frame() %>% arrange(V1,V2)
#funcion para slice el dataframe
slice_countdata <- function(countData, index) {
combination <- as.data.frame(t(combinations))[,index]
treatment1 <- ifelse(str_detect(colnames(CountData),combination[1]) |
str_detect(colnames(CountData),combination[2]),TRUE,FALSE)
slice_countdata <- CountData[treatment1]
return(slice_countdata)
}
set_diet_names <- function() {
names_sliced_dt <- paste0(as.data.frame(t(combinations))) %>%
str_replace_all(., regex("([^A-Za-z\\s])") ,'') %>%
str_replace_all(.,"c","") %>% str_replace_all(" ", "_v._")
}
# DE SEX
DE <- function(count, col, design, lfc) {
dds <- DESeqDataSetFromMatrix(countData=count,
colData=col,
design = design)
register(MulticoreParam(7))
keep <- rowSums(counts(dds)) >= 10 #prefliter
dds <- dds[keep,]
dds <- DESeq(dds, parallel = T)
DESeq2 <- results(dds, alpha = 0.05, lfcThreshold = lfc[2])
treatment <- str_replace_all(DESeq2@elementMetadata$description[2],
regex("\\w+\\s\\w+\\s\\w+\\s\\(\\w+\\):\\s+"),"")
DESeq2 <- DESeq2 %>% as.data.frame() %>% na.omit()
DESeq2$differex <- "Not significant"
DESeq2$differex[DESeq2$log2FoldChange >= lfc[2] & DESeq2$padj <= 0.05 ] <- "UP"
DESeq2$differex[DESeq2$log2FoldChange <= lfc[1] & DESeq2$padj <= 0.05] <- "DOWN"
DESeq2$Comparation = as.factor(treatment)
DESeq2$Contig_Name = row.names(DESeq2)
row.names(DESeq2) <- NULL
DESeq2 <- select(DESeq2,Contig_Name, everything())
return(list(DESeq2,col, design, count))
}
AutoDE <- function(between, lfc) {
if (between == "SEX") {
DESeq2_sex <- DE(count = CountData,
col = Coldata,
design = as.formula("~ SEX"),
lfc = lfc) #Supplementary Table S2.xlsx
write.xlsx(DESeq2_sex[1], paste0(getwd(),"/Results_DE/Supplementary Table S2.xlsx")|> str_replace("/scripts",""))
return(DESeq2_sex)
}else if (between == "DIET wide") {
combinations <<- create_comb(granulate = F) %>%
as.data.frame() %>% arrange(V1,V2)
counter <- 0
sliced_dataframes <- list()
for (i in as.data.frame(t(combinations))) { #crear dataframe para expresion diferenciasl por dieta
counter <- counter +1
slice <- slice_countdata(countData = CountData, index = counter)
sliced_dataframes[[length(sliced_dataframes)+1]] <- slice
rm(slice)
}
names(sliced_dataframes) <- set_diet_names()
counter <- 0
DESeq2_diets <- list()
for (i in sliced_dataframes) {
col_index <- paste(as.data.frame(t(combinations))[[counter+1]][1],
as.data.frame(t(combinations))[[counter+1]][2],sep = "|")
DESeq2_diets[[length(DESeq2_diets)+1]] <- DE(count = i,
col =
filter(Coldata,
grepl(col_index,Grupo_intra)),
design = as.formula(" ~ SEX + DIET"),
lfc = lfc)
counter <- counter +1
print(glue("Differential expression between {names(sliced_dataframes)[counter]} done. \n {counter}/{length(sliced_dataframes)}"))
}
names(DESeq2_diets)<- set_diet_names()
return(DESeq2_diets)
}else if (between == "DIET granulate") {
combinations <<- create_comb(granulate = T) %>%
as.data.frame() %>% arrange(V1,V2)
counter <- 0
sliced_dataframes <- list()
for (i in as.data.frame(t(combinations))) { #crear dataframe para expresion diferenciasl por dieta
counter <- counter +1
slice <- slice_countdata(countData = CountData, index = counter)
sliced_dataframes[[length(sliced_dataframes)+1]] <- slice
rm(slice)
}
names(sliced_dataframes) <- set_diet_names()
counter <- 0
DESeq2_diets <- list()
for (i in sliced_dataframes) {
col_index <- paste(as.data.frame(t(combinations))[[counter+1]][1],
as.data.frame(t(combinations))[[counter+1]][2],sep = "|")
DESeq2_diets[[length(DESeq2_diets)+1]] <- DE(count = i,
col =
filter(Coldata,
grepl(col_index,Grupo_intra)),
design = as.formula(" ~ Grupo_intra"),
lfc = lfc)
counter <- counter +1
print(glue("Differential expression between {names(sliced_dataframes)[counter]} done. \n {counter}/{length(sliced_dataframes)}"))
}
names(DESeq2_diets)<- set_diet_names()
return(DESeq2_diets)
}123456
knitr::opts_chunk$set(echo = T)
knitr::opts_knit$set(root.dir = getwd())
#install and load packages
list_of_CRAN_packages <- c("tidyverse",
"combinat",
"openxlsx",
"stringr",
"ggplot2",
"readr",
"magrittr",
"ggrepel",
"ggpubr",
"pacman",
"glue",
"BiocManager")
new_packages <- list_of_CRAN_packages[!(list_of_CRAN_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
list_of_Bioconductor_packages <- c("BiocParallel",
"DESeq2",
"EDASeq",
"edgeR",
"bigPint")
new_packages <- list_of_Bioconductor_packages[!(list_of_Bioconductor_packages %in% installed.packages()[,"Package"])]
BiocManager::install(version = '3.15')
if(length(new_packages)) BiocManager::install(new_packages, version = "3.15",update = F)
pacman::p_load(c(list_of_Bioconductor_packages,list_of_CRAN_packages), install = F, character.only = T, update = F)
dataPath <- paste0(getwd(),"/Data")|> str_replace("/scripts","")
CountData <-read.csv(paste0(dataPath,"/HTSeqcount_EDITED_mapeo_clean_ALL_AraBAN.txt"), sep = "\t")
CountData_row_names <- CountData |> dplyr::select(Reference)
base::row.names(CountData) <- CountData_row_names$Reference
CountData <-CountData[,-1]
colnames(CountData) %<>%
str_remove(pattern = "HTSeqcount_mapeo_cleanAraBAN") %>%
str_remove(pattern = ".bam.txt")
Coldata <- read.delim(paste0(dataPath,"/Samples_information.csv"),
sep = ",",
stringsAsFactors = T)
create_comb <- function(granulate) {
if (granulate == FALSE) {
treatments <- colnames(CountData) %>%
str_replace_all(.,regex("[\\d]"),"") %>%
str_replace_all(.,regex("F|M"),"") %>%
as.factor() %>%
levels() #lista de posibles tratamientso
combinations <- gtools::combinations(n = 3,r = 2,v=treatments,repeats.allowed = F) %>%
as.data.frame() %>%
arrange(V1,V2)
return(combinations)
}else {
treatments <- colnames(CountData) %>%
str_replace_all(.,regex("[\\d]"),"") %>%
as.factor() %>%
levels() #lista de posibles tratamientso
combinations <- gtools::combinations(n = 6,r = 2,v=treatments,repeats.allowed = F) %>%
as.data.frame() %>%
arrange(V1,V2)
return(combinations)
}
}
#combinations <- create_comb(granulate = F) %>%
#combinations <- gtools::combinations(n=3,r=2,v=treatments,repeats.allowed = F) %>%
#ToDo crear condicional basado en create_comb
#as.data.frame() %>% arrange(V1,V2)
#funcion para slice el dataframe
slice_countdata <- function(countData, index) {
combination <- as.data.frame(t(combinations))[,index]
treatment1 <- ifelse(str_detect(colnames(CountData),combination[1]) |
str_detect(colnames(CountData),combination[2]),TRUE,FALSE)
slice_countdata <- CountData[treatment1]
return(slice_countdata)
}
set_diet_names <- function() {
names_sliced_dt <- paste0(as.data.frame(t(combinations))) %>%
str_replace_all(., regex("([^A-Za-z\\s])") ,'') %>%
str_replace_all(.,"c","") %>% str_replace_all(" ", "_v._")
}
# DE SEX
DE <- function(count, col, design, lfc) {
dds <- DESeqDataSetFromMatrix(countData=count,
colData=col,
design = design)
register(MulticoreParam(7))
keep <- rowSums(counts(dds)) >= 10 #prefliter
dds <- dds[keep,]
dds <- DESeq(dds, parallel = T)
DESeq2 <- results(dds, alpha = 0.05, lfcThreshold = lfc[2])
treatment <- str_replace_all(DESeq2@elementMetadata$description[2],
regex("\\w+\\s\\w+\\s\\w+\\s\\(\\w+\\):\\s+"),"")
DESeq2 <- DESeq2 %>% as.data.frame() %>% na.omit()
DESeq2$differex <- "Not significant"
DESeq2$differex[DESeq2$log2FoldChange >= lfc[2] & DESeq2$padj <= 0.05 ] <- "UP"
DESeq2$differex[DESeq2$log2FoldChange <= lfc[1] & DESeq2$padj <= 0.05] <- "DOWN"
DESeq2$Comparation = as.factor(treatment)
DESeq2$Contig_Name = row.names(DESeq2)
row.names(DESeq2) <- NULL
DESeq2 <- select(DESeq2,Contig_Name, everything())
return(list(DESeq2,col, design, count))
}
AutoDE <- function(between, lfc) {
if (between == "SEX") {
DESeq2_sex <- DE(count = CountData,
col = Coldata,
design = as.formula("~ SEX"),
lfc = lfc) #Supplementary Table S2.xlsx
write.xlsx(DESeq2_sex[1], paste0(getwd(),"/Results_DE/Supplementary Table S2.xlsx")|> str_replace("/scripts",""))
return(DESeq2_sex)
}else if (between == "DIET wide") {
combinations <<- create_comb(granulate = F) %>%
as.data.frame() %>% arrange(V1,V2)
counter <- 0
sliced_dataframes <- list()
for (i in as.data.frame(t(combinations))) { #crear dataframe para expresion diferenciasl por dieta
counter <- counter +1
slice <- slice_countdata(countData = CountData, index = counter)
sliced_dataframes[[length(sliced_dataframes)+1]] <- slice
rm(slice)
}
names(sliced_dataframes) <- set_diet_names()
counter <- 0
DESeq2_diets <- list()
for (i in sliced_dataframes) {
col_index <- paste(as.data.frame(t(combinations))[[counter+1]][1],
as.data.frame(t(combinations))[[counter+1]][2],sep = "|")
DESeq2_diets[[length(DESeq2_diets)+1]] <- DE(count = i,
col =
filter(Coldata,
grepl(col_index,Grupo_intra)),
design = as.formula(" ~ SEX + DIET"),
lfc = lfc)
counter <- counter +1
print(glue("Differential expression between {names(sliced_dataframes)[counter]} done. \n {counter}/{length(sliced_dataframes)}"))
}
names(DESeq2_diets)<- set_diet_names()
return(DESeq2_diets)
}else if (between == "DIET granulate") {
combinations <<- create_comb(granulate = T) %>%
as.data.frame() %>% arrange(V1,V2)
counter <- 0
sliced_dataframes <- list()
for (i in as.data.frame(t(combinations))) { #crear dataframe para expresion diferenciasl por dieta
counter <- counter +1
slice <- slice_countdata(countData = CountData, index = counter)
sliced_dataframes[[length(sliced_dataframes)+1]] <- slice
rm(slice)
}
names(sliced_dataframes) <- set_diet_names()
counter <- 0
DESeq2_diets <- list()
for (i in sliced_dataframes) {
col_index <- paste(as.data.frame(t(combinations))[[counter+1]][1],
as.data.frame(t(combinations))[[counter+1]][2],sep = "|")
DESeq2_diets[[length(DESeq2_diets)+1]] <- DE(count = i,
col =
filter(Coldata,
grepl(col_index,Grupo_intra)),
design = as.formula(" ~ Grupo_intra"),
lfc = lfc)
counter <- counter +1
print(glue("Differential expression between {names(sliced_dataframes)[counter]} done. \n {counter}/{length(sliced_dataframes)}"))
}
names(DESeq2_diets)<- set_diet_names()
return(DESeq2_diets)
}
}
lfc = c(-1.5,1.5)
DESeq2_sex <-  AutoDE(between = "SEX",lfc = c(-2,2))
DESeq2_diet_wide <-  AutoDE(between = "DIET wide", lfc = c(-1.5,1.5))
DESeq2_diet_granulate <-  AutoDE(between = "DIET granulate",lfc = c(-1.5,1.5))
## Anotacion
bind_DE <- function(by) {
if (by == "wide") {
x <- list()
for (i in DESeq2_diet_wide) {
x[[length(x)+1]] <- as.data.frame(i[1])
}
DE <- list()
for (j in x) {
DE[[length(DE)+1]]<- as.data.frame(j)
}
DE <-bind_rows(DE)
DE <- DE %>% bind_rows(as.data.frame(DESeq2_sex[1]))
return(DE)
}else if (by == "granulate") {
x <- list()
for (i in DESeq2_diet_granulate) {
x[[length(x)+1]] <- i[1]
}
DE <- list()
for (j in x) {
DE[[length(DE)+1]]<- as.data.frame(j)
}
DE <-bind_rows(DE)
DE <- DE %>% bind_rows(as.data.frame(DESeq2_sex[1]))
return(DE)
}
}
DE_diet_binded <- bind_DE(by = "wide")
Annot <-read.csv(paste0(dataPath,"/ev_filtered_without_dup_for_cat.csv"))
DE_filtered <- filter(DE_diet_binded, differex != "Not significant")
DE_merged <- merge(x = DE_filtered, y = Annot, by = "Contig_Name", all.x= T )
#DE_merged <- DE_merged[!duplicated(DE_merged$Contig_Name),]
DE_annoted_and_DE <- filter(DE_merged, grepl("^K", Kegg_code) | evalue <= 2.20e-15)
DE_annoted_and_venomrelated <- filter(DE_annoted_and_DE, venom_related == "YES")
DE_merged_diets <- merge(x = DE_filtered, y = Annot, by = "Contig_Name", all.x= T ) %>% filter(.,Comparation != "SEX Male vs Female")
openxlsx::write.xlsx(DE_merged_diets,"~/Documentos/R/R_Transcriptome/Transcriptome_Spider/Results_DE/DE_trancripts_counts(624).xlsx")
#DE_merged_diets <- DE_merged_diets[!duplicated(DE_merged_diets$Contig_Name),]
DE_annoted_diets <-  filter(DE_merged_diets, grepl("^K", Kegg_code) | evalue <= 2.20e-15) %>% filter(., differex != "Not significant")
DE_annoted_and_DE_diets <- DE_annoted_diets %>% filter(.,venom_related == "YES")
raw_counts_DE_annoted_and_venom_related_diets <- CountData[rownames(CountData) %in% DE_merged_diets$Contig_Name,] # ahora estos rawcount contiene todos los trancrticos venom
openxlsx::write.xlsx(raw_counts_DE_annoted_and_venom_related_diets, "~/Documentos/R/R_Transcriptome/Transcriptome_Spider/Results_DE/ raw_counts_DE_annoted_and_venom_related_diets.xlsx",rowNames = T)
raw_counts_DE_annoted_diets <-  CountData[rownames(CountData) %in% DE_annoted_diets$Contig_Name,]
openxlsx::write.xlsx(raw_counts_DE_annoted_diets, "~/Documentos/R/R_Transcriptome/Transcriptome_Spider/Results_DE/ raw_counts_DE_annoted_diets.xlsx",rowNames = T)
Neurotoxins <- filter(DE_annoted_and_DE, New_cathegories == "Neurotoxin")
Serine <- filter(DE_annoted_and_DE, New_cathegories == "Serine endopeptidase")
Metalloproteases <- filter(DE_annoted_and_DE, New_cathegories == "Metalloprotease toxin")
Others <- filter(DE_annoted_and_DE, New_cathegories == "Other proteins")
filter(as.data.frame(DESeq2_sex[1]),
differex != "Not significant") |> nrow() # N tansctri DE
Annot <-read.csv(paste0(dataPath,"/ev_filtered_without_dup_for_cat.csv"))
DE_SEX <- merge(
x = filter(as.data.frame(DESeq2_sex[1]),
differex != "Not significant"),
y = Annot, by = "Contig_Name", all.x= T ) |>
filter(Comparation == "SEX Male vs Female")
filter(DE_SEX, !is.na(DE_SEX$Name)) |> nrow()
filter(DE_SEX, !is.na(DE_SEX$Name) & venom_related == "YES") |> nrow()
openxlsx::write.xlsx(DE_SEX,"~/Documentos/R/R_Transcriptome/Transcriptome_Spider/Results_DE/DE_trancripts(76).xlsx")
dds_sex <- DESeqDataSetFromMatrix(countData=CountData,
colData=Coldata,
design =  ~ SEX)
keep <- rowSums(counts(dds_sex)) >= 10 #prefiltrar un numero minimo de conteos
dds_sex <- dds_sex[keep,]
register(MulticoreParam(7))
dds_sex <- dds_sex %>%
DESeq(., parallel = T)
dds_sex_results <- dds_sex %>%
results() %>%
as.data.frame()
dds_sex_results <- dds_sex_results %>%
mutate(., differex =(case_when(log2FoldChange >= 2 & padj <= 0.05 ~ "UP",
log2FoldChange <= -2 & padj <= 0.05 ~ "DOWN",
log2FoldChange <= 2 | log2FoldChange >= 2 & padj >0.05 ~ "Not significant"))) %>% drop_na()
vsd_0 <- vst(dds_sex, blind = F) # calcualte dispersion trend
sampleDists <- dist(t(assay(vsd_0))) #Calculate distance matrix
sampleDistMatrix <- as.matrix( sampleDists ) # Create distance matrix
mdsData <- data.frame(cmdscale(sampleDistMatrix)) #perform MDS
mds <- cbind(mdsData, as.data.frame(colData(vsd_0)))
F_vr_M_DESeq2_MDS <-  ggplot(mds, aes(X1,X2,color=SEX)) +
geom_label_repel(aes(label = ID_sample), size = 3) +
geom_point(size=3) +
scale_color_manual(values =  c("#B22222","#8B008B"),
labels = c("Female", "Male"),
name = "Sex") +
labs(title = "Females vr Males DESeq2",
x = "Dim 1",
y = "Dim 2") +
theme_classic2()
F_vr_M_DESeq2_MDS
volcanoplot_phoneutria <- ggplot(data = dds_sex_results,
aes(x = log2(baseMean),
y = log2FoldChange, color = differex))+
geom_hex(bins = 30) +
labs(color = "Differentially expressed",
fill = "Number of transcripts")+
xlab("Log2 Base-mean")+ ylab("log2 Fold-change")+
theme_classic2() +
theme(axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
coord_fixed(ratio = 2/1) +
scale_x_continuous(breaks = seq(from = 0, to = 20,2))+
scale_y_continuous(breaks = seq(from = -10, to = 10,2)) +
coord_flip()
volcanoplot_phoneutria
Phoneutri_count_bigPint_SEX <- as.data.frame(dds_sex@assays@data$counts)
xlab <- colnames(Phoneutri_count_bigPint_SEX)
Phoneutri_count_bigPint_SEX$ID <- rownames(Phoneutri_count_bigPint_SEX)
Phoneutri_count_bigPint_SEX %<>%  dplyr::select(ID, everything())
rownames(Phoneutri_count_bigPint_SEX) <- NULL
#you have to change the column names for some shorten ones and separate the treatment and the samples by a point in order to work with bigPint
colnames(Phoneutri_count_bigPint_SEX) <- c("ID","F.1","F.2", "F.3", "F.4", "F.5","F.6", "F.7", "F.8", "F.9","F.10", "M.1", "M.2", "M.3",  "M.4", "M.5", "M.6", "M.7", "M.8",  "M.9","M.10")
head(Phoneutri_count_bigPint_SEX)
datametrics_x <- dds_sex_results
datametrics_x$ID <- rownames(datametrics_x)
datametrics_x <- datametrics_x %>%
select(ID, everything()) %>%  # create new column with the rownames
select(., !differex)
rownames(datametrics_x) <- NULL # delete the rownames
datametrics_x <- list(F_M = datametrics_x) # create a list with the counts insida as a dataframe
datametrics_x$F_M <- as.data.frame(datametrics_x$F_M)
tenSigGenes_phoneutria <- dds_sex_results %>% arrange(padj) %>%  filter(padj <= 0.05) %>% arrange(log2FoldChange)
tenSigGenes_phoneutria <- bind_rows(head(tenSigGenes_phoneutria,10),
tail(tenSigGenes_phoneutria,10))
tenSigGenes_phoneutria$ID <- rownames(tenSigGenes_phoneutria)
rownames(tenSigGenes_phoneutria) <- NULL
tenSigGenes_phoneutria <- dplyr::select(tenSigGenes_phoneutria,"ID") %>% filter(row_number() <= 20)
tenSigGenes_phoneutria <- tenSigGenes_phoneutria[,1]
dataID <- Phoneutri_count_bigPint_SEX$ID
data2 <- as.matrix(Phoneutri_count_bigPint_SEX[,-1])
d <- DGEList(counts = data2, lib.size = rep(1,20))
cpm.data.new <- cpm(d, TRUE, TRUE)
# Normalize de data
data2 <- betweenLaneNormalization(cpm.data.new, which="full", round=FALSE) %>% as.data.frame()
# Create matrix
data2$ID <- dataID
data2 = data2[,c(21,1:20)]
data2s = as.data.frame(t(apply(as.matrix(data2[,-1]), 1, scale)))
data2s$ID = as.character(data2$ID)
data2s = data2s[,c(21,1:20)]
colnames(data2s) <- colnames(data2)
nID = which(is.nan(data2s[,2]))
data2s[nID,2:length(data2s)] = 0
#Create plot
ret <- plotPCP(data = data2s, dataMetrics = datametrics_x, geneList = tenSigGenes_phoneutria, saveFile = FALSE, threshVar = "log2FoldChange", hover = F, lineSize = 0.4, lineColor = "orangered2")
colnames(data2s) <- c("Contin_Name", Coldata$ID_sample)
# extract and improve the plot
p <- ret[[1]]
p <-  p + theme_classic2() +
scale_x_discrete(labels = dds_sex$ID_sample) +
theme(axis.text.x = element_text(angle = 90)) +
annotate("rect",
xmin = 0.5,
xmax = 10.5,
ymin = -2,
ymax = 2,
alpha = 0.2,
fill = "#808000") +
annotate("rect",
xmin = 10.5,
xmax = 20.5,
ymin = -2,
ymax = 2,
alpha = 0.2,
fill = "#00BFFF")
p
